#+TITLE: Misc 
#+OPTIONS: toc:nil num:nil ^:nil


* Setup

#+BEGIN_SRC emacs-lisp

;; yes -> y no -> n
(fset 'yes-or-no-p 'y-or-n-p)

;;  no backups
(setq make-backup-files nil)

;;hidden scroll-bar
(when window-system
    (set-scroll-bar-mode nil))

;;hidden menu bar
;(menu-bar-mode -99)

;;transparent window
;(set-frame-parameter (selected-frame) 'alpha '(90 50))
;(add-to-list 'default-frame-alist '(alpha 90 50))


;; switch buffer
;(require 'iswitchb)
(iswitchb-mode 1)
;;============================================================
;; iswitchb ignores
;;============================================================
(add-to-list 'iswitchb-buffer-ignore "^ ")
(add-to-list 'iswitchb-buffer-ignore "*Messages*")
(add-to-list 'iswitchb-buffer-ignore "*ECB")
(add-to-list 'iswitchb-buffer-ignore "*Buffer")
(add-to-list 'iswitchb-buffer-ignore "*Completions")
(add-to-list 'iswitchb-buffer-ignore "*ftp ")
(add-to-list 'iswitchb-buffer-ignore "*bsh")
(add-to-list 'iswitchb-buffer-ignore "^[tT][aA][gG][sS]$")

;; auto rebuffer 
(global-auto-revert-mode t) 

(require 'scratch)


(defun kill-buffer-no-question ()
  (interactive)
  (kill-buffer (buffer-name)))
(global-set-key "\C-xk" 'kill-buffer-no-question)

;;go away stupid mouse !
(mouse-avoidance-mode 'animate)

;; highlight the bracket 
(show-paren-mode t)

;; disable jumping betwen bracket
(setq show-paren-style 'parentheses)

;;diabeld bell
(setq visible-bell t)
(setq ring-bell-function 'ignore)

;; disabed scratch message
(setq initial-scratch-message nil)




;; get ip address
(defun get-ip-addresses ()
  "Returns the current system IPv4 addresses as a list of
strings"
  (let* ((start 0)
;	 (match-positions ())
	 (ip-re  "[1-9][0-9]?[0-9]?\.[1-9][0-9]?[0-9]?\.1\.[1-9][0-9]?[0-9]?")
	 ;; The rest of these variables try to make this platform agnostic.
	 ;; Add more on to the cond statements if you need
	 (ipconfig (cond ((eq system-type 'windows-nt)
			  "ipconfig")
			 ((eq system-type 'gnu/linux)
			  "/sbin/ifconfig")
                         ((eq system-type 'darwin)
                          "/sbin/ifconfig")
			 (t (error "Don't know how to get-ip-address for %s"
				   system-type))))
	 (line-re (cond ((eq system-type 'windows-nt)
			 "IPv4 Address.*")
			((eq system-type 'gnu/linux)
			 (concat "inet addr:" ip-re))
                        ((eq system-type 'darwin)
                         (concat "inet " ip-re))
			(t (error "Don't know how regex out ip line for %s"
				  system-type))))
	 ;; I lied, not all of the rest of the variables are to make it
	 ;; platform agnostic.  This is where we grab the output
	 (output (shell-command-to-string ipconfig)))

    ;; The inner loop is a bit funky since I can't seem to get it to behave
    ;; exactly like Common Lisp
    (loop for pos in
	  (loop named inner
		with match-positions = ()
		do (let ((ret (string-match line-re output start)))
		     (if ret
			 (setq start (1+ ret))
		       (return-from inner match-positions))
		     (setq match-positions
			   (append match-positions (list ret)))))
	  collect (progn
		    (string-match ip-re output pos)
		    (match-string 0 output)))))
#+END_SRC

#+results:
: get-ip-addresses

#+BEGIN_SRC emacs-lisp
(get-ip-addresses)
#+END_SRC


